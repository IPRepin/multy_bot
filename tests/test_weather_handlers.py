import pytest
from unittest import mock
from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.weather_handlers import weather, another_city
from utils.states import City


class TestWeatherHandlers:
    @pytest.mark.asyncio
    async def test_weather_handler(self):
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã –¥–ª—è message, state –∏ session
        message = mock.MagicMock(spec=types.Message)
        state = mock.MagicMock()
        session = mock.AsyncMock(spec=AsyncSession)

        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç –¥–ª—è from_user
        from_user = mock.MagicMock()
        from_user.id = 123  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º from_user –¥–ª—è message
        message.from_user = from_user

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è message
        message.text = "üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"

        # Mock —Ñ—É–Ω–∫—Ü–∏–∏ get_city_by_user_id
        mock_city = mock.MagicMock(spec=City)
        mock_city.cities = 'Moscow'  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≥–æ—Ä–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å
        get_city_mock = mock.AsyncMock(return_value=mock_city)

        # Mock —Ñ—É–Ω–∫—Ü–∏–∏ get_weather
        get_weather_mock = mock.AsyncMock()

        # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ mock-–≤–µ—Ä—Å–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ—Å—Ç–∞
        with mock.patch('handlers.weather_handlers.get_city_by_user_id', get_city_mock):
            with mock.patch('handlers.weather_handlers.get_weather', get_weather_mock):
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
                await weather(message=message, state=state, session=session)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        get_city_mock.assert_awaited_once_with(session, from_user.id)
        if mock_city.cities != 'no_city':
            get_weather_mock.assert_awaited_once_with(session=session, message=message)
        else:
            state.set_state.assert_awaited_once_with(City.NAME)
            message.answer.assert_called_once_with(
                "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞) –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã."
            )

    @pytest.mark.asyncio
    async def test_another_city_handler(self):
        callback_query = mock.AsyncMock(spec=types.CallbackQuery)
        state = mock.AsyncMock(spec=FSMContext)

        message = mock.AsyncMock(spec=types.Message)
        message.answer = mock.AsyncMock()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º mock –¥–ª—è –º–µ—Ç–æ–¥–∞ answer
        callback_query.message = message

        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ answer —É callback_query
        callback_query.answer = mock.AsyncMock()

        await another_city(callback_query, state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        state.set_state.assert_called_once_with(City.NAME)
        callback_query.message.answer.assert_called_once_with(
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞) –∏ –Ω–∞–∂–º–∏—Ç–µ 'üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'.",
            reply_markup=mock.ANY
        )
        callback_query.answer.assert_awaited_once()
