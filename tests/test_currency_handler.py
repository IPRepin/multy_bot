from handlers.currency_handlers import send_currency, currency_choose_callback, currency_callback

from pycbrf import ExchangeRates

import pytest
from unittest import mock
from aiogram import types

from unittest.mock import AsyncMock, patch

from datetime import datetime


class TestCurrencyHandler:
    @pytest.mark.asyncio
    async def test_send_currency(self):
        # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –¥–ª—è message
        message = mock.MagicMock(spec=types.Message)
        message.from_user = mock.MagicMock()
        message.from_user.first_name = "TestUser"
        message.answer = AsyncMock()

        # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –¥–ª—è rates
        rates = ExchangeRates(str(datetime.now())[:10])
        choose_another_currency_keyboard = AsyncMock()

        # –ü–∞—Ç—á–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à–µ–º –º–æ–¥—É–ª–µ

        with mock.patch('handlers.currency_handlers.choose_another_currency_keyboard',
                        choose_another_currency_keyboard):
            # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await send_currency(message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            choose_another_currency_keyboard.assert_called_once()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            expected_text = (
                f"–û–±–º–µ–Ω–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§ –Ω–∞ {str(datetime.now())[:10]}:\n"
                f"üá∫üá∏ 1{rates['USD'].code} - {rates['USD'].rate}‚ÇΩ\n"
                f"üá™üá∫ 1{rates['EUR'].code} - {rates['EUR'].rate}‚ÇΩ\n"
                f"üá®üá≥ 1{rates['CNY'].code} - {rates['CNY'].rate}‚ÇΩ\n"
                f"üá®üá≠ 1{rates['CHF'].code} - {rates['CHF'].rate}‚ÇΩ\n"
            )
            message.answer.assert_called_once_with(
                expected_text,
                reply_markup=await choose_another_currency_keyboard()
            )

    @pytest.mark.asyncio
    async def test_currency_choose_callback(self):
        callback_query = mock.MagicMock(spec=types.CallbackQuery)
        callback_query.data = "another_currency"

        message = mock.MagicMock(spec=types.Message)
        message.answer = AsyncMock()
        callback_query.message = message

        choose_country_keyboard = AsyncMock()
        callback_query.answer = AsyncMock()

        with mock.patch('handlers.currency_handlers.choose_another_currency_keyboard', choose_country_keyboard):
            await currency_choose_callback(callback_query)
            message.answer.assert_called_once_with("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É", reply_markup=mock.ANY)
        callback_query.answer.assert_called_once()

    @pytest.mark.asyncio
    async def test_currency_callback(self):
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π mock –æ–±—ä–µ–∫—Ç –¥–ª—è callback_query
        callback_query = AsyncMock(spec=types.CallbackQuery)
        callback_query.data = "currency_USD"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π mock –¥–ª—è –º–µ—Ç–æ–¥–∞ answer
        async_answer = AsyncMock()
        callback_query.answer = async_answer

        message = mock.MagicMock(spec=types.Message)
        message.answer = AsyncMock()
        callback_query.message = message

        # –°–æ–∑–¥–∞–µ–º mock –¥–ª—è ExchangeRates
        rates = mock.MagicMock()
        rates.__getitem__.return_value = mock.Mock(code='USD', rate=75.0)

        with patch('handlers.currency_handlers.ExchangeRates', return_value=rates):
            await currency_callback(callback_query)

        currency_cod = callback_query.data.split("_")[-1]
        expected_text = f"1{rates[currency_cod].code} - {rates[currency_cod].rate}‚ÇΩ\n"
        message.answer.assert_called_once_with(expected_text)
