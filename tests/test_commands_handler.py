from unittest.mock import AsyncMock

import pytest
from unittest import mock
from aiogram import types

from handlers.commands_handler import start_command, help_command


class TestCommandsHandler:
    @pytest.mark.asyncio
    async def test_start_command(self):
        # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –¥–ª—è message
        message = mock.MagicMock(spec=types.Message)
        message.from_user = mock.MagicMock()
        message.from_user.first_name = "TestUser"
        message.answer = AsyncMock()

        # –°–æ–∑–¥–∞–µ–º mock-–æ–±—ä–µ–∫—Ç –¥–ª—è session
        session = mock.MagicMock()

        # –°–æ–∑–¥–∞–µ–º mock-—Ñ—É–Ω–∫—Ü–∏–∏
        add_user = AsyncMock()
        add_city = AsyncMock()
        get_main_keyboard = AsyncMock(return_value="mocked_keyboard")

        # –ü–∞—Ç—á–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≤–∞—à–µ–º –º–æ–¥—É–ª–µ
        with mock.patch("handlers.commands_handler.add_user", add_user):
            with mock.patch('handlers.commands_handler.add_city', add_city):
                with mock.patch('handlers.commands_handler.get_main_keyboard', get_main_keyboard):
                    # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    await start_command(message, session)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
                    add_user.assert_called_once_with(session, message)
                    add_city.assert_called_once_with(session, message)
                    get_main_keyboard.assert_called_once()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ answer –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                    message.answer.assert_called_once_with(
                        "–ü—Ä–∏–≤–µ—Ç TestUser!\n"
                        "ü§ñ–Ø –≤–∞—à –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram.\n"
                        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå¶Ô∏è,\n–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç üí±\n"
                        "–∏ –ø–æ–º–æ—á—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ üìù.\n"
                        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!üöÄ",
                        reply_markup="mocked_keyboard"
                    )

    @pytest.mark.asyncio
    async def test_cmd_help(self):
        message = AsyncMock()
        await help_command(message)
        message.reply(
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é: üåü\n"
            "\n"
            "/start üöÄ: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
            "/help : –ü–æ–º–æ—â—å.\n"
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:\n"
            "'üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É' –ü–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É.\n"
            "'üí∞–ö—É—Ä—Å –≤–∞–ª—é—Ç' –ü–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.\n"
            "'üìù–ó–∞–¥–∞—á–∏' –ü–æ–º–æ–∂–µ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏.\n"
        )
