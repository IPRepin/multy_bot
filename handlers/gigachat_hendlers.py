import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from giga_chat.generators_gigachat import get_gigachat_text
from keyboards.gigachat_keyboards.gigachat_replay_keyboards import get_gigachat_keyboard
from keyboards.replay_keyboards import get_main_keyboard
from utils.states import ChatStates

gigachat_router = Router()
logger = logging.getLogger(__name__)


@gigachat_router.message(F.text.in_(["üí¨–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", "ü§ñAI –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥"]))
async def get_chatting(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(ChatStates.text)
    if message.text == "ü§ñAI –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥":
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"')
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")


@gigachat_router.message(ChatStates.text)
async def get_chat_response(message: types.Message, state: FSMContext) -> None:
    gpt_answer = await get_gigachat_text(message.text)
    await message.answer(gpt_answer,
                         reply_markup=await get_gigachat_keyboard())


@gigachat_router.message(ChatStates.wait)
async def set_wait_gpt(message: types.Message) -> None:
    await message.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")


@gigachat_router.message(F.text == "üîÑ–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                         reply_markup=await get_main_keyboard())
