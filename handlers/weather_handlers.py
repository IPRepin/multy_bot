import datetime

import logging

import requests

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from config import settings
from data.weather_city_table import get_city_by_user_id, update_city
from keyboards.replay_keyboards import get_main_keyboard
from keyboards.weathr_keyboards.inline_keyboards import choose_another_city_keyboard
from utils.states import City

weather_router = Router()
logger = logging.getLogger(__name__)


@weather_router.message(F.text == "üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")
async def weather(message: types.Message,
                  state: FSMContext,
                  session: AsyncSession):
    city = await get_city_by_user_id(session,
                                     message.from_user.id)
    if city.cities != 'no_city':
        await get_weather(session=session, message=message, )
    else:
        await state.set_state(City.NAME)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)"
                             " –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã.")


@weather_router.callback_query(F.data == "another_city")
async def another_city(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(City.NAME)
    main_menu = await get_main_keyboard()
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞) "
                              "–∏ –Ω–∞–∂–º–∏—Ç–µ 'üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'.",
                              reply_markup=main_menu)
    await call.answer()


@weather_router.message(City.NAME)
async def add_name_city(message: types.Message,
                        state: FSMContext,
                        session: AsyncSession):
    await state.update_data(cities=message.text)
    data = await state.get_data()
    await state.clear()
    await update_city(session=session,
                      message=message,
                      data=data.get("cities"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ 'üå§–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'", reply_markup=await get_main_keyboard())


async def get_weather(message: types.Message,
                      session: AsyncSession):
    city = await get_city_by_user_id(session, message.from_user.id)
    code_to_smele = {
        'Clear': "–Ø—Å–Ω–æ \U00002600",
        'Clouds': "–û–±–ª–∞—á–Ω–æ \U00002601",
        'Rain': "–î–æ–∂–¥—å \U00002614",
        'Drizzle': "–î–æ–∂–¥—å \U00002614",
        'Thunderstorm': "–ì—Ä–æ–∑–∞ \U000026A1",
        'Snow': "–°–Ω–µ–≥ \U0001F328",
        'Mist': "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        request_open_weather = requests.get(
            url=f"https://api.openweathermap.org/data/2.5/weather?q={city.cities},&"
                f"lang=ru&appid={settings.OPEN_WEATHER_TOKEN}&units=metric"
        )
        data_weather = request_open_weather.json()
        name = data_weather['name']
        cur_weather = data_weather['main']['temp']
        humidity = data_weather['main']['humidity']
        pressure = data_weather['main']['pressure']

        weather_forecast = data_weather['weather'][0]['main']
        if weather_forecast in code_to_smele:
            wd = code_to_smele[weather_forecast]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —Ç–∞–º –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ...'

        sunrise = datetime.datetime.fromtimestamp(data_weather['sys']['sunrise'])
        sunset = datetime.datetime.fromtimestamp(data_weather['sys']['sunset'])
        length_of_the_day = (datetime.datetime.fromtimestamp(data_weather['sys']['sunset']) -
                             datetime.datetime.fromtimestamp(
                                 data_weather['sys']['sunrise']))
        menu = await choose_another_city_keyboard()
        await message.answer(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                             f'üî∏–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {name}\n'
                             f'üî∏–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}–°¬∞\n'
                             f'üî∏{wd}\n'
                             f'üî∏–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç.\n'
                             f'üî∏–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}\n'
                             f'üî∏–í–æ—Å—Ö–æ–¥: {sunrise}\n–ó–∞–∫–∞—Ç: {sunset}\n'
                             f'üî∏–î–ª–∏–Ω–Ω–∞ —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è: {length_of_the_day}\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!',
                             reply_markup=menu
                             )
    except KeyError as error:
        logger.error(error)
        await message.answer("‚ùó–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ‚ùó",
                             reply_markup=await choose_another_city_keyboard())
